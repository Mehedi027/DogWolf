//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Resources/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movements"",
            ""id"": ""80fa2ba3-6ec5-4dfc-9cbf-519641cae4c7"",
            ""actions"": [
                {
                    ""name"": ""Forward&Backward_Moving"",
                    ""type"": ""Button"",
                    ""id"": ""4703a6ab-eddb-4e75-b46f-b739ed677ac1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Side-to-Side_Movement"",
                    ""type"": ""Button"",
                    ""id"": ""a89301d2-42e5-4473-a8bd-2386bf7f78a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cae34982-77e1-45db-90c8-94ab57102a06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""904af3ee-26a2-4820-a3d0-94464f5a1828"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward&Backward_Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6c0743b8-6a10-448a-b63a-d332bd10e5e7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward&Backward_Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3d88f70e-cb4a-4e6b-aa62-84a862ee7b23"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward&Backward_Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c96ec51e-901b-47dd-8d67-970f7bcb3237"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""95889415-f49c-471c-b7f2-f18d8b83d817"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Side-to-Side_Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ddfe3e58-7668-495d-aa3d-d231881f9a13"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Side-to-Side_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""782d2933-2729-42fc-8640-d06593b04cf4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Side-to-Side_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movements
        m_Movements = asset.FindActionMap("Movements", throwIfNotFound: true);
        m_Movements_ForwardBackward_Moving = m_Movements.FindAction("Forward&Backward_Moving", throwIfNotFound: true);
        m_Movements_SidetoSide_Movement = m_Movements.FindAction("Side-to-Side_Movement", throwIfNotFound: true);
        m_Movements_Jump = m_Movements.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movements
    private readonly InputActionMap m_Movements;
    private List<IMovementsActions> m_MovementsActionsCallbackInterfaces = new List<IMovementsActions>();
    private readonly InputAction m_Movements_ForwardBackward_Moving;
    private readonly InputAction m_Movements_SidetoSide_Movement;
    private readonly InputAction m_Movements_Jump;
    public struct MovementsActions
    {
        private @PlayerControls m_Wrapper;
        public MovementsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardBackward_Moving => m_Wrapper.m_Movements_ForwardBackward_Moving;
        public InputAction @SidetoSide_Movement => m_Wrapper.m_Movements_SidetoSide_Movement;
        public InputAction @Jump => m_Wrapper.m_Movements_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movements; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementsActions set) { return set.Get(); }
        public void AddCallbacks(IMovementsActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementsActionsCallbackInterfaces.Add(instance);
            @ForwardBackward_Moving.started += instance.OnForwardBackward_Moving;
            @ForwardBackward_Moving.performed += instance.OnForwardBackward_Moving;
            @ForwardBackward_Moving.canceled += instance.OnForwardBackward_Moving;
            @SidetoSide_Movement.started += instance.OnSidetoSide_Movement;
            @SidetoSide_Movement.performed += instance.OnSidetoSide_Movement;
            @SidetoSide_Movement.canceled += instance.OnSidetoSide_Movement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovementsActions instance)
        {
            @ForwardBackward_Moving.started -= instance.OnForwardBackward_Moving;
            @ForwardBackward_Moving.performed -= instance.OnForwardBackward_Moving;
            @ForwardBackward_Moving.canceled -= instance.OnForwardBackward_Moving;
            @SidetoSide_Movement.started -= instance.OnSidetoSide_Movement;
            @SidetoSide_Movement.performed -= instance.OnSidetoSide_Movement;
            @SidetoSide_Movement.canceled -= instance.OnSidetoSide_Movement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovementsActions instance)
        {
            if (m_Wrapper.m_MovementsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementsActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementsActions @Movements => new MovementsActions(this);
    public interface IMovementsActions
    {
        void OnForwardBackward_Moving(InputAction.CallbackContext context);
        void OnSidetoSide_Movement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
